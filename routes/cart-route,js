import express from 'express';
import { Cart } from '../models/cart.js';
import { Item } from '../models/items.js';
import validateData from '../middlewares/dataValidation.js';
import { applyCampaigns } from '../middlewares/campaignsValidation.js';

const router = express.Router();


router.get('/', async (req, res) => {
    try {
        let cart;
        if (req.session.userId) {
            cart = await Cart.findOne({ user_id: req.session.userId })
                .populate('items.item_id', 'title price desc');
        } else {
            cart = req.session.cart || { items: [] };
        }

        if (!cart) {
            return res.status(404).json({ message: 'Cart not found' });
        }

        // Prepare items for campaign calculation
        const enhancedItems = await Promise.all(cart.items.map(async item => {
            let itemObject;

            if (typeof item.item_id === 'object' && item.item_id !== null) {
                // Logged-in user (Mongoose document)
                itemObject = item.item_id.toObject ? item.item_id.toObject() : item.item_id;
            } else {
                // Guest user (item_id is a string) - fetch from database
                itemObject = await Item.findById(item.item_id).lean() || { _id: item.item_id, title: "Unknown", price: 0, desc: "" };
            }

            return {
                ...itemObject,
                quantity: item.quantity,
                totalPrice: itemObject.price * item.quantity
            };
        }));

        // Calculate campaigns directly
        const campaignResults = applyCampaigns()(enhancedItems);

        // Return enhanced cart with campaign results
        res.json({
            cart: {
                ...campaignResults,
                originalItems: cart.items
            }
        });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
});


// Lägg till vara i varukorgen
router.post('/add', 
    // Validera att item_id och mäng är närvarande och av rätt type
    validateData(['item_id', 'quantity'], { 
        item_id: 'string', 
        quantity: 'number' 
    }),
    async (req, res) => {
        try {
            const { item_id, quantity } = req.body;

            const item = await Item.findById(item_id);
            if (!item) {
                return res.status(404).json({ message: 'Item not found' });
            }

            let cart;
            if (req.user) {
                cart = await Cart.findOne({ user_id: req.user.userId });
                if (!cart) {
                    cart = new Cart({ user_id: req.user.userId, items: [] });
                }
            } else {
                if (!req.session.cart) {
                    req.session.cart = { items: [] };
                }
                cart = req.session.cart;
            }

            const existingItem = cart.items.find(i => i.item_id.toString() === item_id);
            if (existingItem) {
                existingItem.quantity += quantity;
            } else {
                cart.items.push({ item_id, quantity });
            }

            if (req.user) {
                await cart.save();
            } else {
                req.session.cart = cart;
            }

            res.status(200).json({ message: 'Item added to cart', cart });
        } catch (error) {
            res.status(500).json({ message: 'Server error', error: error.message });
        }
    }
);

// Radera produkt
router.post('/remove', 
    // Validera att item_id finns och är av rätt typ
    validateData(['item_id'], { item_id: 'string' }),
    async (req, res) => {
        try {
            const { item_id } = req.body;

            let cart;
            if (req.session.userId) {
                // Inloggad användare hämta varukorg från databas
                cart = await Cart.findOne({ user_id: req.session.userId });
                if (!cart) return res.status(404).json({ message: 'Cart not found' });

                // Hitta item i cart
                const itemIndex = cart.items.findIndex(i => i.item_id.toString() === item_id);
                if (itemIndex !== -1) {
                    if (cart.items[itemIndex].quantity > 1) {
                        cart.items[itemIndex].quantity -= 1;
                    } else {
                        cart.items.splice(itemIndex, 1);
                    }
                    await cart.save();
                }
            } else {
                // Gäst användare hämta varukorg från session
                if (!req.session.cart) req.session.cart = { items: [] };
                cart = req.session.cart;

                const itemIndex = cart.items.findIndex(i => i.item_id === item_id);
                if (itemIndex !== -1) {
                    if (cart.items[itemIndex].quantity > 1) {
                        cart.items[itemIndex].quantity -= 1;
                    } else {
                        cart.items.splice(itemIndex, 1);
                    }
                    req.session.cart = cart;
                }
            }

            res.json({ message: 'Item quantity updated', cart });
        } catch (error) {
            res.status(500).json({ message: 'Server error', error: error.message });
        }
    }
);


export default router;